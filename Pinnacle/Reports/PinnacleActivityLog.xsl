<?xml version="1.0" encoding="UTF-8"?>

<!-- File was generated by XSLfast 5.0, build 13/02/2012 -->
<!-- Layout version: 23 -->
<!-- Please leave unchanged; manage layouts instead -->
<!DOCTYPE xsl:stylesheet [
<!ENTITY XML "http://www.w3.org/TR/REC-xml">
<!ENTITY XMLNames "http://www.w3.org/TR/REC-xml-names">
<!ENTITY XSLT.ns "http://www.w3.org/1999/XSL/Transform">
<!ENTITY XSLTA.ns "http://www.w3.org/1999/XSL/TransformAlias">
<!ENTITY XSLFO.ns "http://www.w3.org/1999/XSL/Format">
<!ENTITY copy "&#169;">
<!ENTITY trade "&#8482;">
<!ENTITY deg "&#x00b0;">
<!ENTITY gt "&#62;">
<!ENTITY sup2 "&#x00b2;">
<!ENTITY frac14 "&#x00bc;">
<!ENTITY quot "&#34;">
<!ENTITY frac12 "&#x00bd;">
<!ENTITY euro "&#x20ac;">
<!ENTITY Omega "&#937;">
]>

<xsl:stylesheet 
	xmlns:fox="http://xml.apache.org/fop/extensions"
	xmlns:date="http://exslt.org/dates-and-times"
	xmlns:fo="http://www.w3.org/1999/XSL/Format" version="1.1"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:saxon="http://icl.com/saxon" extension-element-prefixes="saxon">


<xsl:template match="ActivityLog">
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
<fo:layout-master-set>
<fo:simple-page-master master-name="pagemaster1" page-height="845.0pt" page-width="598.0pt" margin-top="10.0pt" margin-left="10.0pt" margin-bottom="10.0pt" margin-right="10.0pt">
<xsl:variable name="backgroundImageRepeat">no-repeat</xsl:variable><xsl:variable name="pageBackgroundColor">#ffffff</xsl:variable>
<xsl:variable name="uriBackgroundImage"></xsl:variable><xsl:variable name="uriLeftBackgroundImage"></xsl:variable><xsl:variable name="uriRightBackgroundImage"></xsl:variable><xsl:variable name="uriBottomBackgroundImage"></xsl:variable><xsl:variable name="uriTopBackgroundImage"></xsl:variable><fo:region-body margin-left="28.0pt" margin-top="100.0pt" margin-bottom="28.0pt" margin-right="28.0pt" background-image="url({$uriBackgroundImage})" background-repeat="{$backgroundImageRepeat}"   background-position-horizontal="left" background-position-vertical="top" />
<fo:region-before extent="100.0pt" precedence="true" background-image="url({$uriTopBackgroundImage})" background-repeat="no-repeat"  />
<fo:region-after extent="28.0pt" precedence="true" background-image="url({$uriBottomBackgroundImage})" background-repeat="no-repeat"  />
<fo:region-start extent="28.0pt" background-image="url({$uriLeftBackgroundImage})" background-repeat="no-repeat"  />
<fo:region-end extent="28.0pt" background-image="url({$uriRightBackgroundImage})" background-repeat="no-repeat"  />
</fo:simple-page-master>
</fo:layout-master-set>
 <fo:bookmark-tree>
</fo:bookmark-tree>
<fo:page-sequence master-reference="pagemaster1">
<xsl:attribute name="force-page-count">no-force</xsl:attribute>
<fo:static-content flow-name="xsl-region-before">
<fo:block-container  text-align="start" display-align="before" position="absolute" top="0.0pt" left="188.0pt" height="56.0pt" width="168.0pt" reference-orientation="0">
<fo:block  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" keep-together="auto" >
<xsl:variable name="filename">c:/Program Files/HTC/Pinnacle/Reports/ActivityLog/Pinnacle.jpg</xsl:variable>
<fo:external-graphic src="url({$filename})" position="relative" top="0.0pt" left="188.0pt" content-height="56.0pt" content-width="168.0pt" scaling="uniform"/>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable259">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable120"></xsl:variable>
<fo:block-container position="absolute" top="70.0pt" left="24.0pt" height="24.0pt" width="525.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="19.2pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="center" position="relative" top="70.0pt" left="24.0pt" height="24.0pt" width="525.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="16.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Extended Services Activity Log</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
  <fo:block/>
</fo:static-content>
<fo:static-content flow-name="xsl-region-start">
  <fo:block/>
</fo:static-content>
<fo:static-content flow-name="xsl-region-end">
<xsl:variable name="backgroundColorVariable261">#ffffff</xsl:variable>
<fo:block-container position="absolute" top="76.0pt" left="-520.17pt" height="394.0pt" width="524.0pt" border-left-style="solid" border-left-width="1.0pt" border-left-color="#000000" border-right-style="solid" border-right-width="1.0pt" border-right-color="#000000" border-top-style="solid" border-top-width="1.0pt" border-top-color="#000000" border-bottom-style="solid" border-bottom-width="1.0pt" border-bottom-color="#000000" background-color="{$backgroundColorVariable261}">
<fo:block />
</fo:block-container>
<fo:block-container position="absolute" top="101.0pt" left="-521.17pt" width="544.11pt" height="22.0pt" >
 <fo:block  keep-together="auto" >
  <fo:instream-foreign-object>
   <svg:svg xmlns:svg="http://www.w3.org/2000/svg" width = "529.11pt" height="7.0pt">
    <svg:g style="stroke:#000000;  fill: none; stroke-dasharray: none; stroke-opacity: 1; stroke-width:1.0pt">
     <svg:line  x1="1.0pt" y1="1.0pt" x2="523.11pt" y2="1.0pt" />
    </svg:g>
   </svg:svg>
  </fo:instream-foreign-object>
 </fo:block>
</fo:block-container>
<fo:block-container position="absolute" top="139.0pt" left="-521.17pt" width="544.11pt" height="22.379999999999995pt" >
 <fo:block  keep-together="auto" >
  <fo:instream-foreign-object>
   <svg:svg xmlns:svg="http://www.w3.org/2000/svg" width = "529.11pt" height="7.3799999999999955pt">
    <svg:g style="stroke:#000000;  fill: none; stroke-dasharray: none; stroke-opacity: 1; stroke-width:1.0pt">
     <svg:line  x1="1.0pt" y1="1.3799999999999955pt" x2="523.11pt" y2="1.0pt" />
    </svg:g>
   </svg:svg>
  </fo:instream-foreign-object>
 </fo:block>
</fo:block-container>
<fo:block-container position="absolute" top="173.0pt" left="-521.17pt" width="544.11pt" height="22.0pt" >
 <fo:block  keep-together="auto" >
  <fo:instream-foreign-object>
   <svg:svg xmlns:svg="http://www.w3.org/2000/svg" width = "529.11pt" height="7.0pt">
    <svg:g style="stroke:#000000;  fill: none; stroke-dasharray: none; stroke-opacity: 1; stroke-width:1.0pt">
     <svg:line  x1="1.0pt" y1="1.0pt" x2="523.11pt" y2="1.0pt" />
    </svg:g>
   </svg:svg>
  </fo:instream-foreign-object>
 </fo:block>
</fo:block-container>
<fo:block-container position="absolute" top="207.0pt" left="-521.17pt" width="544.11pt" height="22.0pt" >
 <fo:block  keep-together="auto" >
  <fo:instream-foreign-object>
   <svg:svg xmlns:svg="http://www.w3.org/2000/svg" width = "529.11pt" height="7.0pt">
    <svg:g style="stroke:#000000;  fill: none; stroke-dasharray: none; stroke-opacity: 1; stroke-width:1.0pt">
     <svg:line  x1="1.0pt" y1="1.0pt" x2="523.11pt" y2="1.0pt" />
    </svg:g>
   </svg:svg>
  </fo:instream-foreign-object>
 </fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable262">#ffffff</xsl:variable>
<fo:block-container position="absolute" top="546.0pt" left="-74.0pt" height="15.0pt" width="77.0pt" display-align="before" reference-orientation="0">
<fo:block text-align="start" color="#000000" font-family="Arial" font-size="12.0pt" padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" position="relative" top="546.0pt" height="15.0pt" width="77.0pt" keep-together="auto"  line-height="14.5pt" white-space-collapse="false"  linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  hyphenate="true" language="en" >  <xsl:call-template name="date:format-date">
      <xsl:with-param name="date-time" select="'2012-07-09'"/>
      <xsl:with-param name="pattern" select="'MM/dd/yyyy'" />
      <xsl:with-param name="dateSep" select="'-'" />
      <xsl:with-param name="timeSep" select="':'" />
  </xsl:call-template></fo:block>
</fo:block-container>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block/>
<!--
<fo:block-container position="absolute" top="4pt" left="2pt" height="752.0pt" width="536.0pt" border-width="1.0pt"> <fo:block span="none" white-space-collapse="false"  font-family="Helvetica" font-size="12pt" text-align="start" position="relative" top="44pt" left="27pt" height="752.0pt" width="536.0pt"><fo:instream-foreign-object  xmlns:xlink="http://www.w3.org/1999/xlink"><svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="600" height="600" viewBox="0 0 1000 1000"> <g id="test-body-content"><text x="0" y="100" style="opacity:.25; font-family:Arial; font-size:100pt; fill:rgb(200,200,200)">XSLfast</text><text x="50" y="200" style="opacity:.25; font-family:Arial; font-size:100pt; fill:rgb(200,200,200)">DEMO</text></g></svg></fo:instream-foreign-object></fo:block></fo:block-container><xsl:variable name="backgroundColorVariable263">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable121"></xsl:variable>
-->
<fo:block-container position="absolute" top="17.0pt" left="13.0pt" height="15.0pt" width="41.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="17.0pt" left="13.0pt" height="15.0pt" width="41.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Date:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable265">#ffffff</xsl:variable>
<fo:block-container position="absolute" top="17.0pt" left="60.0pt" height="15.0pt" width="83.0pt" display-align="before" reference-orientation="0">
<fo:block text-align="start" color="#000000" font-family="Arial" font-size="12.0pt" padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" position="relative" top="17.0pt" left="60.0pt" height="15.0pt" width="83.0pt" keep-together="auto"  line-height="14.5pt" white-space-collapse="false"  linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  hyphenate="true" language="en" >  <xsl:call-template name="date:format-date">
      <xsl:with-param name="date-time" select="'2012-06-25'"/>
      <xsl:with-param name="pattern" select="'MM/dd/yyyy'" />
      <xsl:with-param name="dateSep" select="'-'" />
      <xsl:with-param name="timeSep" select="':'" />
  </xsl:call-template></fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable266">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable122"></xsl:variable>
<fo:block-container position="absolute" top="42.0pt" left="10.0pt" height="15.0pt" width="77.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="42.0pt" left="10.0pt" height="15.0pt" width="77.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Consumer:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable268">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable123"></xsl:variable>
<fo:block-container position="absolute" top="42.0pt" left="87.0pt" height="15.0pt" width="142.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="42.0pt" left="87.0pt" height="15.0pt" width="142.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Consumer"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable270">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable124"></xsl:variable>
<fo:block-container position="absolute" top="42.0pt" left="261.0pt" height="15.0pt" width="70.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="42.0pt" left="261.0pt" height="15.0pt" width="70.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Employer:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable272">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable125"></xsl:variable>
<fo:block-container position="absolute" top="42.0pt" left="331.0pt" height="15.0pt" width="182.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="42.0pt" left="331.0pt" height="15.0pt" width="182.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Employer"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable274">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable126"></xsl:variable>
<fo:block-container position="absolute" top="84.0pt" left="13.0pt" height="15.0pt" width="81.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="84.0pt" left="13.0pt" height="15.0pt" width="81.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Review Date:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable276">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable127"></xsl:variable>
<fo:block-container position="absolute" top="84.0pt" left="94.0pt" height="15.0pt" width="53.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="84.0pt" left="94.0pt" height="15.0pt" width="53.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Date"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable278">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable128"></xsl:variable>
<fo:block-container position="absolute" top="84.0pt" left="167.0pt" height="15.0pt" width="70.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="84.0pt" left="167.0pt" height="15.0pt" width="70.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Employed:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable280">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable129"></xsl:variable>
<fo:block-container position="absolute" top="84.0pt" left="237.0pt" height="15.0pt" width="42.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="84.0pt" left="237.0pt" height="15.0pt" width="42.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Employed"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable282">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable130"></xsl:variable>
<fo:block-container position="absolute" top="84.0pt" left="285.0pt" height="15.0pt" width="92.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="84.0pt" left="285.0pt" height="15.0pt" width="92.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Meeting Type:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable284">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable131"></xsl:variable>
<fo:block-container position="absolute" top="84.0pt" left="375.0pt" height="15.0pt" width="135.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="84.0pt" left="375.0pt" height="15.0pt" width="135.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="MeetingType"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable286">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable132"></xsl:variable>
<fo:block-container position="absolute" top="114.0pt" left="12.0pt" height="15.0pt" width="101.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="114.0pt" left="12.0pt" height="15.0pt" width="101.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Valued Outcome:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable288">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable133"></xsl:variable>
<fo:block-container position="absolute" top="114.0pt" left="115.0pt" height="15.0pt" width="402.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="114.0pt" left="115.0pt" height="15.0pt" width="402.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="ValuedOutcome"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable290">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable134"></xsl:variable>
<fo:block-container position="absolute" top="152.0pt" left="13.0pt" height="15.0pt" width="62.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="152.0pt" left="13.0pt" height="15.0pt" width="62.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Barriers:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable292">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable135"></xsl:variable>
<fo:block-container position="absolute" top="152.0pt" left="83.0pt" height="15.0pt" width="434.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="152.0pt" left="83.0pt" height="15.0pt" width="434.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Barriers"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable294">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable136"></xsl:variable>
<fo:block-container position="absolute" top="185.0pt" left="13.0pt" height="15.0pt" width="62.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="185.0pt" left="13.0pt" height="15.0pt" width="62.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:text>Location:</xsl:text></fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable296">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable137"></xsl:variable>
<fo:block-container position="absolute" top="185.0pt" left="83.0pt" height="15.0pt" width="431.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="185.0pt" left="83.0pt" height="15.0pt" width="431.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Location"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable298">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable138"></xsl:variable>
<fo:block-container position="absolute" top="227.0pt" left="11.0pt" height="223.0pt" width="506.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="227.0pt" left="11.0pt" height="223.0pt" width="506.0pt" keep-together="auto"  color="#000000" font-family="Times New Roman" font-size="12.0pt" letter-spacing="normal" word-spacing="normal">
<fo:inline>
<xsl:value-of disable-output-escaping="no" select="Notes"/>
</fo:inline>
</fo:block>
</fo:block-container>
<xsl:variable name="backgroundColorVariable300">#ffffff</xsl:variable>
<xsl:variable name="backgroundImageTextFlowVariable139"></xsl:variable>
<fo:block-container position="absolute" top="546.0pt" left="12.0pt" height="15.0pt" width="203.0pt" display-align="before" reference-orientation="0">
<fo:block linefeed-treatment="preserve" white-space-treatment="ignore-if-surrounding-linefeed"  padding-bottom="0.0pt" start-indent="0.0pt" end-indent="0.0pt" padding-top="0.0pt" padding="0.0pt" line-height="14.399999999999999pt" line-stacking-strategy="max-height" white-space-collapse="false"  hyphenate="true" language="en"  text-align="start" position="relative" top="546.0pt" left="12.0pt" height="15.0pt" width="203.0pt" keep-together="auto"  color="#000000" font-family="Arial" font-size="12.0pt" font-weight="bold" letter-spacing="normal" word-spacing="normal">
<fo:block hyphenate="true" language="en" >
<fo:inline>
<xsl:text>Employment Specialist </xsl:text></fo:inline>
<fo:inline>
<xsl:text>Signature:</xsl:text></fo:inline>
</fo:block>
</fo:block>
</fo:block-container>
<fo:block-container position="absolute" top="559.0pt" left="223.0pt" width="237.0pt" height="22.0pt" >
 <fo:block  keep-together="auto" >
  <fo:instream-foreign-object>
   <svg:svg xmlns:svg="http://www.w3.org/2000/svg" width = "222.0pt" height="7.0pt">
    <svg:g style="stroke:#000000;  fill: none; stroke-dasharray: none; stroke-opacity: 1; stroke-width:1.0pt">
     <svg:line  x1="1.0pt" y1="1.0pt" x2="216.0pt" y2="1.0pt" />
    </svg:g>
   </svg:svg>
  </fo:instream-foreign-object>
 </fo:block>
</fo:block-container>
<xsl:if test='position()=last()'>
  <fo:block id="lastPage"/>
</xsl:if>
</fo:flow>
</fo:page-sequence>
</fo:root>
</xsl:template>
<xsl:template match="include-xsl-fo">
    <xsl:copy-of select="@*"/>
</xsl:template>
<date:months>
    <date:month length="31" abbr="Jan">January</date:month>
    <date:month length="28" abbr="Feb">February</date:month>
    <date:month length="31" abbr="Mar">March</date:month>
    <date:month length="30" abbr="Apr">April</date:month>
    <date:month length="31" abbr="May">May</date:month>
    <date:month length="30" abbr="Jun">June</date:month>
    <date:month length="31" abbr="Jul">July</date:month>
    <date:month length="31" abbr="Aug">August</date:month>
    <date:month length="30" abbr="Sep">September</date:month>
    <date:month length="31" abbr="Oct">October</date:month>
    <date:month length="30" abbr="Nov">November</date:month>
    <date:month length="31" abbr="Dec">December</date:month>
</date:months>

<date:days>
    <date:day abbr="Sun">Sunday</date:day>
    <date:day abbr="Mon">Monday</date:day>
    <date:day abbr="Tue">Tuesday</date:day>
    <date:day abbr="Wed">Wednesday</date:day>
    <date:day abbr="Thu">Thursday</date:day>
    <date:day abbr="Fri">Friday</date:day>
    <date:day abbr="Sat">Saturday</date:day>
</date:days>

<xsl:template name="date:format-date">
    <xsl:param name="date-time"/>
    <xsl:param name="pattern"/>

    <xsl:param name="dateSep" select="'-'"/>
    <xsl:param name="timeSep" select="':'"/>

    <xsl:variable name="formatted">
        <xsl:choose>
            <xsl:when test="starts-with($date-time, '---')">
                <xsl:call-template name="date:_format-date">
                    <xsl:with-param name="year" select="'NaN'"/>
                    <xsl:with-param name="month" select="'NaN'"/>
                    <xsl:with-param name="day" select="number(substring($date-time, 4, 2))"/>
                    <xsl:with-param name="pattern" select="$pattern"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="starts-with($date-time, '--')">
                <xsl:call-template name="date:_format-date">
                    <xsl:with-param name="year" select="'NaN'"/>
                    <xsl:with-param name="month" select="number(substring($date-time, 3, 2))"/>
                    <xsl:with-param name="day" select="number(substring($date-time, 6, 2))"/>
                    <xsl:with-param name="pattern" select="$pattern"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="neg" select="starts-with($date-time, '-')"/>
                <xsl:variable name="no-neg">
                    <xsl:choose>
                        <xsl:when test="$neg or starts-with($date-time, '+')">
                            <xsl:value-of select="substring($date-time, 2)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$date-time"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="no-neg-length" select="string-length($no-neg)"/>
                <xsl:variable name="timezone">
                    <xsl:choose>
                        <xsl:when test="substring($no-neg, $no-neg-length) = 'Z'">Z</xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="tz" select="substring($no-neg, $no-neg-length - 5)"/>
                            <xsl:if test="(substring($tz, 1, 1) = '-' or
                                           substring($tz, 1, 1) = '+') and
                                          substring($tz, 4, 1) = $timeSep">
                                <xsl:value-of select="$tz"/>
                            </xsl:if>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:if test="not(string($timezone)) or
                              $timezone = 'Z' or
                              (number(substring($timezone, 2, 2)) &lt;= 23 and
                               number(substring($timezone, 5, 2)) &lt;= 59)">
                    <xsl:variable name="dt" select="substring($no-neg, 1, $no-neg-length - string-length($timezone))"/>
                    <xsl:variable name="dt-length" select="string-length($dt)"/>
                    <xsl:choose>
                        <xsl:when test="substring($dt, 3, 1) = $timeSep and
                                        substring($dt, 6, 1) = $timeSep">
                            <xsl:variable name="hour" select="substring($dt, 1, 2)"/>
                            <xsl:variable name="min" select="substring($dt, 4, 2)"/>
                            <xsl:variable name="sec" select="substring($dt, 7)"/>
                            <xsl:if test="number($hour) &lt;= 23 and
                                          number($min) &lt;= 59 and
                                          number($sec) &lt;= 60">
                                <xsl:call-template name="date:_format-date">
                                    <xsl:with-param name="year" select="'NaN'"/>
                                    <xsl:with-param name="month" select="'NaN'"/>
                                    <xsl:with-param name="day" select="'NaN'"/>
                                    <xsl:with-param name="hour" select="$hour"/>
                                    <xsl:with-param name="minute" select="$min"/>
                                    <xsl:with-param name="second" select="$sec"/>
                                    <xsl:with-param name="timezone" select="$timezone"/>
                                    <xsl:with-param name="pattern" select="$pattern"/>
                                </xsl:call-template>
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="substring($dt, 3, 1) = $timeSep">
                            <xsl:variable name="hour" select="substring($dt, 1, 2)"/>
                            <xsl:variable name="min" select="substring($dt, 4, 2)"/>
                            <xsl:if test="number($hour) &lt;= 23 and
                                          number($min) &lt;= 59">
                                <xsl:call-template name="date:_format-date">
                                    <xsl:with-param name="year" select="'NaN'"/>
                                    <xsl:with-param name="month" select="'NaN'"/>
                                    <xsl:with-param name="day" select="'NaN'"/>
                                    <xsl:with-param name="hour" select="$hour"/>
                                    <xsl:with-param name="minute" select="$min"/>
                                    <xsl:with-param name="second" select="0"/>
                                    <xsl:with-param name="timezone" select="$timezone"/>
                                    <xsl:with-param name="pattern" select="$pattern"/>
                                </xsl:call-template>
                            </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="year" select="number(substring($dt, 1, 4)) * ((number($neg) * -2) + 1)"/>
                            <xsl:choose>
                                <xsl:when test="not(number($year))"/>
                                <xsl:when test="$dt-length = 4">
                                    <xsl:call-template name="date:_format-date">
                                        <xsl:with-param name="year" select="$year"/>
                                        <xsl:with-param name="timezone" select="$timezone"/>
                                        <xsl:with-param name="pattern" select="$pattern"/>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="substring($dt, 5, 1) = $dateSep">
                                    <xsl:variable name="month" select="substring($dt, 6, 2)"/>
                                    <xsl:choose>
                                        <xsl:when test="not(number($month) &lt;= 12)"/>
                                        <xsl:when test="$dt-length = 7">
                                            <xsl:call-template name="date:_format-date">
                                                <xsl:with-param name="year" select="$year"/>
                                                <xsl:with-param name="month" select="$month"/>
                                                <xsl:with-param name="timezone" select="$timezone"/>
                                                <xsl:with-param name="pattern" select="$pattern"/>
                                            </xsl:call-template>
                                        </xsl:when>
                                        <xsl:when test="substring($dt, 8, 1) = $dateSep">
                                            <xsl:variable name="day" select="substring($dt, 9, 2)"/>
                                            <xsl:if test="number($day) &lt;= 31">
                                                <xsl:choose>
                                                    <xsl:when test="$dt-length = 10">
                                                        <xsl:call-template name="date:_format-date">
                                                            <xsl:with-param name="year" select="$year"/>
                                                            <xsl:with-param name="month" select="$month"/>
                                                            <xsl:with-param name="day" select="$day"/>
                                                            <xsl:with-param name="timezone" select="$timezone"/>
                                                            <xsl:with-param name="pattern" select="$pattern"/>
                                                        </xsl:call-template>
                                                    </xsl:when>
                                                    <xsl:when test="substring($dt, 11, 1) = 'T' and
                                                                    substring($dt, 14, 1) = $timeSep and
                                                                    substring($dt, 17, 1) = $timeSep">
                                                        <xsl:variable name="hour" select="substring($dt, 12, 2)"/>
                                                        <xsl:variable name="min" select="substring($dt, 15, 2)"/>
                                                        <xsl:variable name="sec" select="substring($dt, 18)"/>
                                                        <xsl:if test="number($hour) &lt;= 23 and
                                                                      number($min) &lt;= 59 and
                                                                      number($sec) &lt;= 60">
                                                            <xsl:call-template name="date:_format-date">
                                                                <xsl:with-param name="year" select="$year"/>
                                                                <xsl:with-param name="month" select="$month"/>
                                                                <xsl:with-param name="day" select="$day"/>
                                                                <xsl:with-param name="hour" select="$hour"/>
                                                                <xsl:with-param name="minute" select="$min"/>
                                                                <xsl:with-param name="second" select="$sec"/>
                                                                <xsl:with-param name="timezone" select="$timezone"/>
                                                                <xsl:with-param name="pattern" select="$pattern"/>
                                                            </xsl:call-template>
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:when test="substring($dt, 11, 1) = 'T' and
                                                                    substring($dt, 14, 1) = $timeSep">
                                                        <xsl:variable name="hour" select="substring($dt, 12, 2)"/>
                                                        <xsl:variable name="min" select="substring($dt, 15, 2)"/>
                                                        <xsl:if test="number($hour) &lt;= 23 and
                                                                      number($min) &lt;= 59">
                                                            <xsl:call-template name="date:_format-date">
                                                                <xsl:with-param name="year" select="$year"/>
                                                                <xsl:with-param name="month" select="$month"/>
                                                                <xsl:with-param name="day" select="$day"/>
                                                                <xsl:with-param name="hour" select="$hour"/>
                                                                <xsl:with-param name="minute" select="$min"/>
                                                                <xsl:with-param name="second" select="0"/>
                                                                <xsl:with-param name="timezone" select="$timezone"/>
                                                                <xsl:with-param name="pattern" select="$pattern"/>
                                                            </xsl:call-template>
                                                        </xsl:if>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </xsl:if>
                                        </xsl:when>
                                    </xsl:choose>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="$formatted"/>
</xsl:template>

<xsl:template name="date:_format-date">
    <xsl:param name="year"/>
    <xsl:param name="month" select="1"/>
    <xsl:param name="day" select="1"/>
    <xsl:param name="hour" select="0"/>
    <xsl:param name="minute" select="0"/>
    <xsl:param name="second" select="0"/>
    <xsl:param name="timezone" select="'Z'"/>
    <xsl:param name="pattern" select="''"/>
    <xsl:variable name="char" select="substring($pattern, 1, 1)"/>
    <xsl:choose>
        <xsl:when test="not($pattern)"/>
        <xsl:when test='$char = "&apos;"'>
            <xsl:choose>
                <xsl:when test='substring($pattern, 2, 1) = "&apos;"'>
                    <xsl:text>&apos;</xsl:text>
                    <xsl:call-template name="date:_format-date">
                        <xsl:with-param name="year" select="$year"/>
                        <xsl:with-param name="month" select="$month"/>
                        <xsl:with-param name="day" select="$day"/>
                        <xsl:with-param name="hour" select="$hour"/>
                        <xsl:with-param name="minute" select="$minute"/>
                        <xsl:with-param name="second" select="$second"/>
                        <xsl:with-param name="timezone" select="$timezone"/>
                        <xsl:with-param name="pattern" select="substring($pattern, 3)"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="literal-value" select='substring-before(substring($pattern, 2), "&apos;")'/>
                    <xsl:value-of select="$literal-value"/>
                    <xsl:call-template name="date:_format-date">
                        <xsl:with-param name="year" select="$year"/>
                        <xsl:with-param name="month" select="$month"/>
                        <xsl:with-param name="day" select="$day"/>
                        <xsl:with-param name="hour" select="$hour"/>
                        <xsl:with-param name="minute" select="$minute"/>
                        <xsl:with-param name="second" select="$second"/>
                        <xsl:with-param name="timezone" select="$timezone"/>
                        <xsl:with-param name="pattern" select="substring($pattern, string-length($literal-value) + 2)"/>
                    </xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:when>
        <xsl:when test="not(contains('abcdefghjiklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', $char))">
            <xsl:value-of select="$char"/>
            <xsl:call-template name="date:_format-date">
                <xsl:with-param name="year" select="$year"/>
                <xsl:with-param name="month" select="$month"/>
                <xsl:with-param name="day" select="$day"/>
                <xsl:with-param name="hour" select="$hour"/>
                <xsl:with-param name="minute" select="$minute"/>
                <xsl:with-param name="second" select="$second"/>
                <xsl:with-param name="timezone" select="$timezone"/>
                <xsl:with-param name="pattern" select="substring($pattern, 2)"/>
            </xsl:call-template>
        </xsl:when>
        <xsl:when test="not(contains('GyMdhHmsSEDFwWakKz', $char))">
            <xsl:message>
            Invalid token in format string:
                <xsl:value-of select="$char"/>
            </xsl:message>
            <xsl:call-template name="date:_format-date">
                <xsl:with-param name="year" select="$year"/>
                <xsl:with-param name="month" select="$month"/>
                <xsl:with-param name="day" select="$day"/>
                <xsl:with-param name="hour" select="$hour"/>
                <xsl:with-param name="minute" select="$minute"/>
                <xsl:with-param name="second" select="$second"/>
                <xsl:with-param name="timezone" select="$timezone"/>
                <xsl:with-param name="pattern" select="substring($pattern, 2)"/>
            </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
            <xsl:variable name="next-different-char" select="substring(translate($pattern, $char, ''), 1, 1)"/>
            <xsl:variable name="pattern-length">
                <xsl:choose>
                    <xsl:when test="$next-different-char">
                        <xsl:value-of select="string-length(substring-before($pattern, $next-different-char))"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="string-length($pattern)"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:choose>
                <xsl:when test="$char = 'G'">
                    <xsl:choose>
                        <xsl:when test="string($year) = 'NaN'"/>
                        <xsl:when test="$year > 0">AD</xsl:when>
                        <xsl:otherwise>BC</xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:when test="$char = 'M'">
                    <xsl:choose>
                        <xsl:when test="string($month) = 'NaN'"/>
                        <xsl:when test="$pattern-length >= 3">
                            <xsl:variable name="month-node" select="document('')/*/date:months/date:month[number($month)]"/>
                            <xsl:choose>
                                <xsl:when test="$pattern-length >= 4">
                                    <xsl:value-of select="$month-node"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$month-node/@abbr"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$pattern-length = 2">
                            <xsl:value-of select="format-number(number($month), '00')"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$month"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:when test="$char = 'E'">
                    <xsl:choose>
                        <xsl:when test="string($year) = 'NaN' or string($month) = 'NaN' or string($day) = 'NaN'"/>
                        <xsl:otherwise>
                            <xsl:variable name="month-days" select="sum(document('')/*/date:months/date:month[position() &lt; $month]/@length)"/>
                            <xsl:variable name="days" select="$month-days + $day + boolean(((not($year mod 4) and $year mod 100) or not($year mod 400)) and $month > 2)"/>
                            <xsl:variable name="y-1" select="$year - 1"/>
                            <xsl:variable name="dow"
                                select="(($y-1 + floor($y-1 div 4) -
                                          floor($y-1 div 100) + floor($y-1 div 400) +
                                          $days)
                                         mod 7) + 1"/>
                            <xsl:variable name="day-node" select="document('')/*/date:days/date:day[number($dow)]"/>
                            <xsl:choose>
                                <xsl:when test="$pattern-length >= 4">
                                    <xsl:value-of select="$day-node"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$day-node/@abbr"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:when test="$char = 'a'">
                    <xsl:choose>
                        <xsl:when test="string($hour) = 'NaN'"/>
                        <xsl:when test="number($hour) >= 12">PM</xsl:when>
                        <xsl:otherwise>AM</xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:when test="$char = 'z'">
                    <xsl:choose>
                        <xsl:when test="$timezone = 'Z'">UTC</xsl:when>
                        <xsl:otherwise>UTC
                            <xsl:value-of select="$timezone"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="padding">
                        <xsl:choose>
                            <xsl:when test="$pattern-length > 10">
                                <xsl:call-template name="str_padding">
                                    <xsl:with-param name="length" select="$pattern-length"/>
                                    <xsl:with-param name="chars" select="'0'"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="substring('0000000000', 1, $pattern-length)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:choose>
                        <xsl:when test="$char = 'y'">
                            <xsl:choose>
                                <xsl:when test="string($year) = 'NaN'"/>
                                <xsl:when test="$pattern-length > 2">
                                    <xsl:value-of select="format-number(number($year), $padding)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number(substring($year, string-length($year) - 1)), $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'd'">
                            <xsl:choose>
                                <xsl:when test="string($day) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number($day), $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'h'">
                            <xsl:variable name="h" select="number($hour) mod 12"/>
                            <xsl:choose>
                                <xsl:when test="string($hour) = 'NaN'"></xsl:when>
                                <xsl:when test="$h">
                                    <xsl:value-of select="format-number(number($h), $padding)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(12, $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'H'">
                            <xsl:choose>
                                <xsl:when test="string($hour) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number($hour), $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'k'">
                            <xsl:choose>
                                <xsl:when test="string($hour) = 'NaN'"/>
                                <xsl:when test="$hour">
                                    <xsl:value-of select="format-number(number($hour), $padding)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(24, $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'K'">
                            <xsl:choose>
                                <xsl:when test="string($hour) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number($hour) mod 12, $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'm'">
                            <xsl:choose>
                                <xsl:when test="string($minute) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number($minute), $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 's'">
                            <xsl:choose>
                                <xsl:when test="string($second) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number($second), $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'S'">
                            <xsl:choose>
                                <xsl:when test="string($second) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="format-number(number(substring-after($second, '.')), $padding)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$char = 'F'">
                            <xsl:choose>
                                <xsl:when test="string($day) = 'NaN'"/>
                                <xsl:otherwise>
                                    <xsl:value-of select="floor($day div 7) + 1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="string($year) = 'NaN' or string($month) = 'NaN' or string($day) = 'NaN'"/>
                        <xsl:otherwise>
                            <xsl:variable name="month-days" select="sum(document('')/*/date:months/date:month[position() &lt; $month]/@length)"/>
                            <xsl:variable name="days" select="$month-days + $day + boolean(((not($year mod 4) and $year mod 100) or not($year mod 400)) and $month > 2)"/>
                            <xsl:choose>
                                <xsl:when test="$char = 'D'">
                                    <xsl:value-of select="format-number(number($days), $padding)"/>
                                </xsl:when>
                                <xsl:when test="$char = 'w'">
                                    <xsl:call-template name="date:_week-in-year">
                                        <xsl:with-param name="days" select="$days"/>
                                        <xsl:with-param name="year" select="$year"/>
                                    </xsl:call-template>
                                </xsl:when>
                                <xsl:when test="$char = 'W'">
                                    <xsl:variable name="y-1" select="$year - 1"/>
                                    <xsl:variable name="day-of-week"
                                        select="(($y-1 + floor($y-1 div 4) -
                                                 floor($y-1 div 100) + floor($y-1 div 400) +
                                                 $days)
                                                 mod 7) + 1"/>
                                    <xsl:choose>
                                        <xsl:when test="($day - $day-of-week) mod 7">
                                            <xsl:value-of select="floor(($day - $day-of-week) div 7) + 2"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="floor(($day - $day-of-week) div 7) + 1"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="date:_format-date">
                <xsl:with-param name="year" select="$year"/>
                <xsl:with-param name="month" select="$month"/>
                <xsl:with-param name="day" select="$day"/>
                <xsl:with-param name="hour" select="$hour"/>
                <xsl:with-param name="minute" select="$minute"/>
                <xsl:with-param name="second" select="$second"/>
                <xsl:with-param name="timezone" select="$timezone"/>
                <xsl:with-param name="pattern" select="substring($pattern, $pattern-length + 1)"/>
            </xsl:call-template>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="date:_week-in-year">
    <xsl:param name="days"/>
    <xsl:param name="year"/>
    <xsl:variable name="y-1" select="$year - 1"/>
    <!-- this gives the day of the week, counting from Sunday = 0 -->
    <xsl:variable name="day-of-week"
        select="($y-1 + floor($y-1 div 4) -
                 floor($y-1 div 100) + floor($y-1 div 400) +
                 $days)
                mod 7"/>
    <!-- this gives the day of the week, counting from Monday = 1 -->
    <xsl:variable name="dow">
        <xsl:choose>
            <xsl:when test="$day-of-week">
                <xsl:value-of select="$day-of-week"/>
            </xsl:when>
            <xsl:otherwise>7</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>
    <xsl:variable name="start-day" select="($days - $dow + 7) mod 7"/>
    <xsl:variable name="week-number" select="floor(($days - $dow + 7) div 7)"/>
    <xsl:choose>
        <xsl:when test="$start-day >= 4">
            <xsl:value-of select="$week-number + 1"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:choose>
                <xsl:when test="not($week-number)">
                    <xsl:call-template name="date:_week-in-year">
                        <xsl:with-param name="days" select="365 + ((not($y-1 mod 4) and $y-1 mod 100) or not($y-1 mod 400))"/>
                        <xsl:with-param name="year" select="$y-1"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$week-number"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="str_padding">
    <xsl:param name="length" select="0"/>
    <xsl:param name="chars" select="' '"/>
    <xsl:choose>
        <xsl:when test="not($length) or not($chars)"/>
        <xsl:otherwise>
            <xsl:variable name="string"
                select="concat($chars, $chars, $chars, $chars, $chars,
                               $chars, $chars, $chars, $chars, $chars)"/>
            <xsl:choose>
                <xsl:when test="string-length($string) >= $length">
                    <xsl:value-of select="substring($string, 1, $length)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:call-template name="str_padding">
                        <xsl:with-param name="length" select="$length"/>
                        <xsl:with-param name="chars" select="$string"/>
                    </xsl:call-template>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>
</xsl:stylesheet>
