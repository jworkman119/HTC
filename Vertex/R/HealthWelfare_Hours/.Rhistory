install.packages("gdata")
library("gdata", lib.loc="C:/Program Files/R/R-2.15.2/library")
library(gdata)
help("C:\Users\jeremyp.HTC\Documents\Temp\ContractBreakout")
help("C:\\Users\\jeremyp.HTC\\Documents\\Temp\\ContractBreakout.csv")
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
View(ContractBreakout)
View(ContractBreakout)
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
install.packages("reshape")
library("reshape", lib.loc="C:/Program Files/R/R-2.15.2/library")
cast(ContractBreakout,Employee~Disability)
cast(ContractBreakout,EMPLOYEE~DISABILITY)
cast(ContractBreakout,JobCode,EMPLOYEE~DISABILITY)
View(ContractBreakout)
View(ContractBreakout)
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
ContractBreakout $JobCode
aggregate(ContractBreakout$HoursWorked,by=list(Category=ContractBreakout$JobCode,Employee),HoursWorked=sum)
aggregate(ContractBreakout$HoursWorked,by=list(Category=ContractBreakout$JobCode,Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(Category=ContractBreakout$JobCode),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(Employee=ContractBreakout$Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum)
frmContract<-data.frame(aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum))
View(frmContract)
View(frmContract)
table(frmContract$Disability)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum)
frmContract[order(JobCode,Employee)]
frmContract[order(JobCode)]
order(frmContract$JobCode)
order($JobCode)
order(frmContract$JobCode, frmContract$Employee)
View(frmContract)
View(frmContract)
View(frmContract)
View(frmContract)
View(frmContract)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),Hours=(FUN=sum))
colnames(frmContract)<-c("JobCode","Employee","Disability","Hours")
View(frmContract)
View(frmContract)
count(frmContract,vars=Employee,wt_var=JobCode)
count(frmContract,vars=frmContract$Employee,wt_var=frmContract$JobCode)
view(frmContract)
View(frmContract)
count(frmContract)
count(frmContract,Employee)
count(frmContract,vars="Employee")
count(frmContract,vars="Employee",wt_var="JobCode")
count(frmContract,vars="Employee")
count(frmContract,vars="Employee",wt_var="Disability")
count(frmContract,vars="JobCode",wt_var="Employee")
count(frmContract,vars="JobCode")
cast(frmContract,JobCode ~ Disability)
cast(frmContract,JobCode ~ Disability ~ Hours)
sum(frmContract,Hours)
sum(frmContract,"Hours")
sum(frmContract$Hours)
cast(frmContract,JobCode ~ Disability ~ sum(Hours))
cast(frmContract,JobCode ~ Disability ~ Hours)
cast(frmContract,JobCode ~ Disability)
cast(frmContract,JobCode ~ Disability,sum)
cast(frmContract,JobCode ~ Hours ~ Disability)
cast(frmContract,JobCode ~ sum(Hours) ~ Disability)
sum(frmContract$Hours)
cast(frmContract,JobCode ~ Disability,margins=c("grand_col"))
cast(frmContract,JobCode Hours ~ Disability)
cast(frmContract,JobCode + Hours ~ Disability)
cast(frmContract,JobCode ~ Disability)
cast(frmContract,JobCode ~ Disability,margins=c("grand_col"))
cast(frmContract,JobCode ~ Disability + Hours,margins=c("grand_col"))
cast(frmContract,JobCode + Hours ~ Disability + Hours,margins=c("grand_col"))
cast(frmContract,JobCode + Hours ~ Disability,margins=c("grand_col"))
cast(frmContract,JobCode + Hours ~ Disability,fun.aggregate=sum,margins=c("grand_col"))
install.packages("reshape2")
library("reshape2", lib.loc="C:/Program Files/R/R-2.15.2/library")
dcast(frmContractBreakout, JobCode ~ Disability + Hours, fun.aggregate = sum)
cast(frmContractBreakout, JobCode ~ Disability + Hours, fun.aggregate = sum)
frmContract <- melt(frmContract, id.vars=1:2)
frmContract2 <- melt(frmContract, id.vars=1:2)
View(frmContract2)
View(frmContract2)
dcast(frmContractBreakout, JobCode ~ Disability + Hours, fun.aggregate = sum)
View(frmContract2)
View(frmContract2)
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
aggregate(ContractBreakout$HoursWorked
,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability)
,FUN=sum
)
dfContract <- data.frame(aggregate(ContractBreakout$HoursWorked
,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability)
,FUN=sum
))
cast(dfContract, JobCode ~ Disability + Hours, fun.aggregate = sum)
cast(dfContract, JobCode ~ Disability, fun.aggregate = sum)
cast(dfContract, JobCode ~ Disability)
cast(dfContract, JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, JobCode ~ Disability)
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours + JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours ~ JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours ~ JobCode,margins=c("grand_col"))
cast(dfContract, JobCode ~ Hours,margins=c("grand_col"))
cast(dfContract, JobCode ~ Disability,margins=c("grand_col"))
View(dfContract)
View(dfContract)
names(dfContract[4])<-"Hours"
View(dfContract)
View(dfContract)
names(dfContract[3])<-"Hours"
View(dfContract)
View(dfContract)
names(dfContract[4])<-paste("Hours")
View(dfContract)
colnames(dfContract)<-c("JobCode","Employee","Disability","Hours")
View(dfContract)
cast(dfContract, JobCode ~ Disability, margins="grand_col")
cast(dfContract, Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode ~ Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode, Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode + Hours ~ Disability, margins="grand_col")
dfDisability<-data.frame(cast(dfContract, JobCode + Hours ~ Disability, margins="grand_col"))
dfDisability<-data.frame(cast(dfContract, JobCode ~ Disability, margins="grand_col"))
cast(dfContract, JobCode ~ Disability, margins="grand_col")
View(dfDisability)
View(dfDisability)
aggregate(dfContract$HoursWorked,by=list(JobCode=dfContract$JobCode),FUN=sum)
ddply(dfContract, .(JobCode, Hours), numcolwise(sum)))
ddply(dfContract, .(JobCode, Hours), numcolwise(sum))
aggregate(dfContract$Hours,by=list(JobCode), FUN = sum)
aggregate(dfContract$Hours,by=list("JobCode"), FUN = sum)
aggregate(ContractBreakout$Hours,by=list("JobCode"), FUN = sum)
aggregate(dfContract$Hours,by=list("JobCode"), FUN = sum)
aggregate(dfContract$Hours,by=list("dfContract$JobCode"), FUN = sum)
aggregate(dfContract$Hours,by=list("dfContract$JobCode"), sum)
aggregate(x=dfContract$Hours,by=list("dfContract$JobCode"), sum)
aggregate(dfContract$Hours,by=list("dfContract$JobCode"), FUN=sum)
aggregate(dfContract$,by=list("dfContract$Employee"), FUN=sum)
aggregate(dfContract$Hours,by=list("dfContract$Employee"), FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(ContractBreakout$JobCode), FUN = sum)
cast(ContractBreakout,JobCode ~ Disability,FUN=sum)
cast(ContractBreakout, JobCode ~ Disability, fun.aggregate = sum)
productSKU <- read.csv("~/Temp/productSKU.csv")
View(productSKU)
skuImport<-productSKU[,c(2,3,4)]
skuImport["Company"]<- HTC
skuImport["Company"]<- "HTC"
View(skuImport)
View(skuImport)
rm skuImport
rm(skuImport)
View(productSKU)
View(productSKU)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
View(skuImport)
View(skuImport)
colNames(skuImport)<-c("Company","SKU", "Description")
colnames(skuImport)<-c("Company","SKU", "Description")
View(skuImport)
View(skuImport)
write.csv(skuImport,"~/Temp/epicorePartImport.csv")
rm(productSKU,skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
colnames(skuImport)<-c("Company","SKU", "Description")
write.csv(skuImport,"~/Temp/epicorePartImport.csv",row.names=FALSE,na="")
rm(productSKU,skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
colnames(skuImport)<-c("Company","SKU", "Description")
duplicated(skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
duplicated(skuImport)
View(skuImport)
View(skuImport)
unique(skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport <-unique(skuImport)
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
colnames(skuImport)<-c("Company","SKU", "Description")
write.csv(skuImport,"~/Temp/epicorePartImport.csv",row.names=FALSE,na="")
rm(productSKU,skuImport)
epicoreWarehouseBin <- read.csv("~/Temp/Epicore_Import/epicoreWarehouseBin.csv")
View(epicoreWarehouseBin)
gsub(" ","",epicorewarehouseBin$Description , fixed=TRUE)
Bins<-dataframe(epicorewarehouseBin)
Bins<-data.frame(epicorewarehouseBin)
Bins<-data.frame(epicoreWarehouseBin)
gsub(" ","",Bins$Description , fixed=TRUE)
Bins$Description<-gsub(" ","",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("BIN","Bin",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("Bin0","Bin ",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("SHELF","Shf ",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("01","1",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("02","2",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("03","3",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("04","4",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("05","5",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("06","6",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("07","7",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("08","8",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("09","9",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("SECTION","Sec",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
View(Bins)
write.csv(Bins,"C:/Users/jeremyp.HTC/Documents/Temp/Epicore_Import/epicoreWarehouseBin.csv",row.names=FALSE,na="0")
Bins$Description<-gsub("Section","Sec",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("Shelf","Shf",Bins$Description , fixed=TRUE)
write.csv(Bins,"C:/Users/jeremyp.HTC/Documents/Temp/Epicore_Import/epicoreWarehouseBin.csv",row.names=FALSE,na="0")
Bins$Description<-gsub("Sec","Sec ",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("Shf","Shf ",Bins$Description , fixed=TRUE)
write.csv(Bins,"C:/Users/jeremyp.HTC/Documents/Temp/Epicore_Import/epicoreWarehouseBin.csv",row.names=FALSE,na="0")
View(Bins)
View(Bins)
epicoreWarehouseBin <- read.csv("~/Temp/Epicore_Import/epicoreWarehouseBin.csv")
View(epicoreWarehouseBin)
Bins <- epicoreWarehouseBin
rm(epicoreWarehouseBin)
View(Bins)
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
View(test)
View(test)
View(Bins)
Bins <- read.csv("~/Temp/Epicore_Import/epicoreWarehouseBin.csv")
View(Bins)
test <- data.frame(do.call('rbind', strsplit(as.character(Bin$Num,Bins$Description),'/',fixed=TRUE)))
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Num,Bins$Description),'/',fixed=TRUE)))
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
rm(test)
within(Bin, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE))))
within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE))))
test <- within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE))))
View(test)
View(test)
View(test)
View(test)
rm(test)
test <- data.fram(within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))))
test <- data.frame(within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))))
View(test)
View(test)
rm(test)
test <- <-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))
test <-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))
View(test)
rm(test)
library("reshape", lib.loc="C:/Program Files/R/R-2.15.2/library")
View(Bins)
colsplit(Bins,split="/",c("Col1","Col2","Col3"))
colsplit(Bins,"/",c("Col1","Col2","Col3"))
detach("package:reshape", unload=TRUE)
library("reshape", lib.loc="C:/Program Files/R/R-2.15.2/library")
colsplit(Bins,"/",c("Col1","Col2","Col3"))
test <- lapply(seq_along(Bins), function(i){colsplit(Bins[, i], "/", paste0(colnames(Bins)[i], c("Col1","Col2","Col3")))})
test <- lapply(seq_along(Bins), function(i){colsplit(Bins[, i], "/", paste0(colnames(Bins)[i], letters[1:2]))})
test <- lapply(seq_along(Bins), function(i){colsplit(Bins[, i], "/", paste0(colnames(Bins)[i], letters[1]))})
strsplit(Bins$Description, "/")
split(Bins$Description, "/")
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
View(test)
strg <- c("123:abc", "qwe:789f", "abcde", "a:fd", "567")
rm(test)
fix(strg)
rm(strg)
sapply(strsplit(Bins$Description, "/"), function(x){if (length(x) == 1) x <- c(x, NA)x})
test <- strsplit(Bins$Description, "/", fixed=TRUE)
test <- strsplit(Bins$Description, '/', fixed=TRUE)
colsplit(Bins$Description,"/",c(Col1,Col2,Col3))
StartDay="3-16-2014"
EndDay="6-21-2014"
# Retrieving sql
library(stringr)
setwd("C:/Users/jeremyp.HTC/Documents/Development/Vertex/R/HealthWelfare_Hours")
SQL<-paste(readLines("HealthWelfare.sql",encoding="UTF-8"),collapse=' ')
SQL<-str_replace_all(SQL[1],'\t','')
SQL<-str_replace(SQL[1],'@StartDay',paste("\'",StartDay,"\'",sep=""))
SQL<-str_replace(SQL[1],'@EndDay',paste("\'",EndDay,"\'",sep=""))
#Returning data set to
library("RODBC", lib.loc="C:/Program Files/R/R-2.15.2/library")
odbc<-odbcConnect("VertexCloud",uid="1403reports",pwd="2260@Dwyer!!")
HealthWelfare<-data.frame(sqlQuery(odbc,SQL[1]))
# Retrieving sql
library(stringr)
setwd("C:/Users/jeremyp.HTC/Documents/Development/Vertex/R/HealthWelfare_Hours")
SQL<-paste(readLines("Hours.sql",encoding="UTF-8"),collapse=' ')
SQL<-str_replace_all(SQL[1],'\t','')
SQL<-str_replace(SQL[1],'@StartDay',paste("\'",StartDay,"\'",sep=""))
SQL<-str_replace(SQL[1],'@EndDay',paste("\'",EndDay,"\'",sep=""))
Hours<-data.frame(sqlQuery(odbc,SQL[1]))
colnames(Hours)<- c("EmployeeNumber", "Employee" ,"CostCenter", "JobNumber", "JobDescription" ,"Productivity","Hours","Earnings","Pieces", "TrainingWage")
Hours$Productivity<-round(Hours$Productivity,digits=2)
Hours$Hours<-round(Hours$Hours,digits=2)
Hours$Earnings<-round(Hours$Earnings,digits=2)
Hours$Productivity<-ifelse(Hours$Productivity==0.00,"",Hours$Productivity)
odbcCloseAll()
rm(odbc)
library("plyr", lib.loc="C:/Program Files/R/R-2.15.2/library")
# getting the job the employee worked the max number of hours at
maxHours <- ddply(Hours, "EmployeeNumber", summarise, Hrs=max(Hours), EmployeeNumber=EmployeeNumber[which.max(Hours)],Employee=Employee[which.max(Hours)],  CostCenter=CostCenter[which.max(Hours)], Job=JobNumber[which.max(Hours)], Description=JobDescription[which.max(Hours)], Productivity=Productivity[which.max(Hours)])
maxHours<- maxHours[,c(2,3,4,5,1,6)]
#Making Adjustments to HealthWelfare
colnames(HealthWelfare)<- c("EmployeeNumber","JobNumber", "HealthWelfare")
HealthWelfare$HealthWelfare<-round(HealthWelfare$HealthWelfare,digits=2)
Hours2 <- Hours[,!(names(Hours) %in% "Employee")]
HealthWelfare<- merge(HealthWelfare, Hours2,by=c("EmployeeNumber","JobNumber"),all.y=TRUE)
rm(Hours2)
HealthWelfare<-HealthWelfare[,c(1,2,4,5,6,7,8,9,3)]
# Retrieving Personal Data sql
library(stringr)
setwd("C:/Users/jeremyp.HTC/Documents/Development/Vertex/R/HealthWelfare_Hours")
SQL<-paste(readLines("PersonalData.sql",encoding="UTF-8"),collapse=' ')
SQL<-str_replace_all(SQL[1],'\t','')
SQL<-str_replace(SQL[1],'@StartDay',paste("\'",StartDay,"\'",sep=""))
SQL<-str_replace(SQL[1],'@EndDay',paste("\'",EndDay,"\'",sep=""))
#Returning data set to
library("RODBC", lib.loc="C:/Program Files/R/R-2.15.2/library")
odbc<-odbcConnect("epicorHCM") #,uid="htc\epicadmin",pwd="1YcYrwzr")
PersonalData<-data.frame(sqlQuery(odbc,SQL[1]))
odbcCloseAll()
rm(odbc)
#Getting the nish and other values
HealthWelfare<-HealthWelfare[! is.na(HealthWelfare$JobNumber),]
HealthWelfare$Job<-as.numeric(substr(HealthWelfare$JobNumber,1,1))
HealthWelfare$Job<-ifelse(HealthWelfare$Job == 1, 'Nish', ifelse(HealthWelfare$Job > 2, 'Commercial', 'NYSLD'))
Nish<-HealthWelfare[,(names(HealthWelfare) %in% c("EmployeeNumber","JobNumber", "Hours","Earnings", "HealthWelfare"))]
Nish["Job"]<-as.numeric(substr(Nish$JobNumber,1,1))
Nish$Job<-ifelse(Nish$Job == 1, 'Nish', ifelse(Nish$Job > 2, 'Commercial', 'NYSLD'))
Commercial<-Nish[apply(Nish,1,function(x) {any(!c("Nish") %in% x)}),]
Commercial <- Commercial[,!(names(Commercial) %in% c("JobNumber","Job"))]
Commercial$HealthWelfare[is.na(Commercial$HealthWelfare)]<-0
Commercial<-ddply(Commercial, c('EmployeeNumber'), function(x) c(Hours=sum(x$Hours),Earnings=sum(x$Earnings),HealthWelfare=sum(x$HealthWelfare)))
colnames(Commercial)<- c("EmployeeNumber","Non-AbilityOne_Hours", "Non-AbilityOne_Earnings" ,"Non-AbilityOne_HealthWelfare")
Commercial['StateUseProject']<-'yes'
Nish<-Nish[apply(Nish,1,function(x) {any(c("Nish") %in% x)}),]
Nish<-Nish[,!(names(Nish) %in% c("JobNumber","Job"))]
Nish$HealthWelfare[is.na(Nish$HealthWelfare)]<-0
Nish<-ddply(Nish, c('EmployeeNumber'), function(x) c(Hours=sum(x$Hours),Earnings=sum(x$Earnings), HealthWelfare=sum(x$HealthWelfare)))
colnames(Nish)<- c("EmployeeNumber","AbilityOne_Hours", "AbilityOne_Earnings" ,"AbilityOne_HealthWelfare")
Nish['OtherProject']<-'yes'
#Getting primary job info
PrimaryJob<-maxHours[,(names(maxHours) %in% c("EmployeeNumber","Description"))]
colnames(PrimaryJob)<- c("EmployeeNumber","JobDescription")
#Getting Training Wage
TrainingWage<-Hours[,(names(Hours) %in% c("EmployeeNumber","TrainingWage"))]
TrainingWage<-TrainingWage[(TrainingWage$TrainingWage=='yes'),]
#Creating new dataframe for productivity
Productivity <- HealthWelfare[,(names(HealthWelfare) %in% c("EmployeeNumber","Productivity", "CostCenter", "Job"))]
#Removing rows with no productivity, so we can calculate the mean
Productivity<-subset(Productivity,Productivity!="")
#casting productivity from char to numeric
Productivity<-transform(Productivity,Productivity=as.numeric(Productivity))
Productivity <- Productivity[,!(names(Productivity) %in% c("CostCenter","Job"))]
Productivity<-ddply(Productivity, c('EmployeeNumber'), function(x) c(Productivity=round(mean(x$Productivity), digits=2)))
#Adding columns "basis for Productivity", "FLSA14c Certificate"
Productivity['BasisForProductivity']<-'PR'
Productivity['FLSA14c_Certificate']<-'yes'
#dropping columngs Job and Job Description
drops <- c("JobNumber","JobDescription", "CostCenter")
HealthWelfare <- HealthWelfare[,!(names(HealthWelfare) %in% drops)]
HealthWelfare$HealthWelfare[is.na(HealthWelfare$HealthWelfare)]<-0
HealthWelfare$Pieces[is.na(HealthWelfare$Pieces)]<-0
HealthWelfare<-ddply(HealthWelfare, c('EmployeeNumber'), function(x) c(TotalHours=sum(x$Hours), TotalEarnings=sum(x$Earnings), Pieces=sum(x$Pieces), TotalHealthWelfare = sum(x$HealthWelfare)))
# Merging personal data, nish, commercial, productivity into final dataset
HealthWelfare<- merge(Nish,HealthWelfare,by=c("EmployeeNumber"),all.y=TRUE)
HealthWelfare<- merge(Commercial,HealthWelfare,by=c("EmployeeNumber"),all.y=TRUE)
HealthWelfare<- merge(TrainingWage,HealthWelfare,by=c("EmployeeNumber"),all.y=TRUE)
HealthWelfare<- merge(PrimaryJob,HealthWelfare,by=c("EmployeeNumber"),all.y=TRUE)
HealthWelfare<- merge(PersonalData,HealthWelfare,by=c("EmployeeNumber"),all.y=TRUE)
HealthWelfare<- merge(HealthWelfare,Productivity,by=c("EmployeeNumber"),all.x=TRUE,all.y=TRUE)
rm(Nish,Commercial, PrimaryJob,PersonalData,Productivity,drops, Hours, TrainingWage)
#Adding Elibible for Fringe Benefits
HealthWelfare['Eligible_FringeBenefits']<-NA
HealthWelfare$Eligible_FringeBenefits<-ifelse(HealthWelfare$TotalHours > 30, 'Yes','No')
#Adding 'BasisForProductivity'
HealthWelfare['BasisForProductivity']<-NA
HealthWelfare$'BasisForProductivity'<-ifelse(HealthWelfare$Productivity>0,'Yes' ,ifelse(HealthWelfare$AbilityOne_HealthWelfare > 0, 'Yes',ifelse(HealthWelfare$'Non-AbilityOne_HealthWelfare' > 0, 'Yes', 'No')))
#Reordering HealthWelfare & Hours by employee
HealthWelfare<-HealthWelfare[order(HealthWelfare[,3]),]
maxHours<-maxHours[order(maxHours[,2]),]
View(HealthWelfare)
View(HealthWelfare)
Test <- ddply(HealthWelfare,.(EmployeeNumber),summarize)
Test <- ddply(HealthWelfare,c('EmployeeNumber'),summarize)
