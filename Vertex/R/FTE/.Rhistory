install.packages("gdata")
library("gdata", lib.loc="C:/Program Files/R/R-2.15.2/library")
library(gdata)
help("C:\Users\jeremyp.HTC\Documents\Temp\ContractBreakout")
help("C:\\Users\\jeremyp.HTC\\Documents\\Temp\\ContractBreakout.csv")
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
View(ContractBreakout)
View(ContractBreakout)
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
install.packages("reshape")
library("reshape", lib.loc="C:/Program Files/R/R-2.15.2/library")
cast(ContractBreakout,Employee~Disability)
cast(ContractBreakout,EMPLOYEE~DISABILITY)
cast(ContractBreakout,JobCode,EMPLOYEE~DISABILITY)
View(ContractBreakout)
View(ContractBreakout)
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
ContractBreakout $JobCode
aggregate(ContractBreakout$HoursWorked,by=list(Category=ContractBreakout$JobCode,Employee),HoursWorked=sum)
aggregate(ContractBreakout$HoursWorked,by=list(Category=ContractBreakout$JobCode,Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(Category=ContractBreakout$JobCode),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(Employee=ContractBreakout$Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum)
frmContract<-data.frame(aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum))
View(frmContract)
View(frmContract)
table(frmContract$Disability)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum)
frmContract[order(JobCode,Employee)]
frmContract[order(JobCode)]
order(frmContract$JobCode)
order($JobCode)
order(frmContract$JobCode, frmContract$Employee)
View(frmContract)
View(frmContract)
View(frmContract)
View(frmContract)
View(frmContract)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability),Hours=(FUN=sum))
colnames(frmContract)<-c("JobCode","Employee","Disability","Hours")
View(frmContract)
View(frmContract)
count(frmContract,vars=Employee,wt_var=JobCode)
count(frmContract,vars=frmContract$Employee,wt_var=frmContract$JobCode)
view(frmContract)
View(frmContract)
count(frmContract)
count(frmContract,Employee)
count(frmContract,vars="Employee")
count(frmContract,vars="Employee",wt_var="JobCode")
count(frmContract,vars="Employee")
count(frmContract,vars="Employee",wt_var="Disability")
count(frmContract,vars="JobCode",wt_var="Employee")
count(frmContract,vars="JobCode")
cast(frmContract,JobCode ~ Disability)
cast(frmContract,JobCode ~ Disability ~ Hours)
sum(frmContract,Hours)
sum(frmContract,"Hours")
sum(frmContract$Hours)
cast(frmContract,JobCode ~ Disability ~ sum(Hours))
cast(frmContract,JobCode ~ Disability ~ Hours)
cast(frmContract,JobCode ~ Disability)
cast(frmContract,JobCode ~ Disability,sum)
cast(frmContract,JobCode ~ Hours ~ Disability)
cast(frmContract,JobCode ~ sum(Hours) ~ Disability)
sum(frmContract$Hours)
cast(frmContract,JobCode ~ Disability,margins=c("grand_col"))
cast(frmContract,JobCode Hours ~ Disability)
cast(frmContract,JobCode + Hours ~ Disability)
cast(frmContract,JobCode ~ Disability)
cast(frmContract,JobCode ~ Disability,margins=c("grand_col"))
cast(frmContract,JobCode ~ Disability + Hours,margins=c("grand_col"))
cast(frmContract,JobCode + Hours ~ Disability + Hours,margins=c("grand_col"))
cast(frmContract,JobCode + Hours ~ Disability,margins=c("grand_col"))
cast(frmContract,JobCode + Hours ~ Disability,fun.aggregate=sum,margins=c("grand_col"))
install.packages("reshape2")
library("reshape2", lib.loc="C:/Program Files/R/R-2.15.2/library")
dcast(frmContractBreakout, JobCode ~ Disability + Hours, fun.aggregate = sum)
cast(frmContractBreakout, JobCode ~ Disability + Hours, fun.aggregate = sum)
frmContract <- melt(frmContract, id.vars=1:2)
frmContract2 <- melt(frmContract, id.vars=1:2)
View(frmContract2)
View(frmContract2)
dcast(frmContractBreakout, JobCode ~ Disability + Hours, fun.aggregate = sum)
View(frmContract2)
View(frmContract2)
ContractBreakout <- read.csv("~/Temp/ContractBreakout.csv")
View(ContractBreakout)
aggregate(ContractBreakout$HoursWorked
,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability)
,FUN=sum
)
dfContract <- data.frame(aggregate(ContractBreakout$HoursWorked
,by=list(JobCode=ContractBreakout$JobCode,Employee=ContractBreakout$Employee,Disability=ContractBreakout$Disability)
,FUN=sum
))
cast(dfContract, JobCode ~ Disability + Hours, fun.aggregate = sum)
cast(dfContract, JobCode ~ Disability, fun.aggregate = sum)
cast(dfContract, JobCode ~ Disability)
cast(dfContract, JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, JobCode ~ Disability)
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours + JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours ~ JobCode ~ Disability,margins=c("grand_col"))
cast(dfContract, Hours ~ JobCode,margins=c("grand_col"))
cast(dfContract, JobCode ~ Hours,margins=c("grand_col"))
cast(dfContract, JobCode ~ Disability,margins=c("grand_col"))
View(dfContract)
View(dfContract)
names(dfContract[4])<-"Hours"
View(dfContract)
View(dfContract)
names(dfContract[3])<-"Hours"
View(dfContract)
View(dfContract)
names(dfContract[4])<-paste("Hours")
View(dfContract)
colnames(dfContract)<-c("JobCode","Employee","Disability","Hours")
View(dfContract)
cast(dfContract, JobCode ~ Disability, margins="grand_col")
cast(dfContract, Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode ~ Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode, Hours ~ Disability, margins="grand_col")
cast(dfContract, JobCode + Hours ~ Disability, margins="grand_col")
dfDisability<-data.frame(cast(dfContract, JobCode + Hours ~ Disability, margins="grand_col"))
dfDisability<-data.frame(cast(dfContract, JobCode ~ Disability, margins="grand_col"))
cast(dfContract, JobCode ~ Disability, margins="grand_col")
View(dfDisability)
View(dfDisability)
aggregate(dfContract$HoursWorked,by=list(JobCode=dfContract$JobCode),FUN=sum)
ddply(dfContract, .(JobCode, Hours), numcolwise(sum)))
ddply(dfContract, .(JobCode, Hours), numcolwise(sum))
aggregate(dfContract$Hours,by=list(JobCode), FUN = sum)
aggregate(dfContract$Hours,by=list("JobCode"), FUN = sum)
aggregate(ContractBreakout$Hours,by=list("JobCode"), FUN = sum)
aggregate(dfContract$Hours,by=list("JobCode"), FUN = sum)
aggregate(dfContract$Hours,by=list("dfContract$JobCode"), FUN = sum)
aggregate(dfContract$Hours,by=list("dfContract$JobCode"), sum)
aggregate(x=dfContract$Hours,by=list("dfContract$JobCode"), sum)
aggregate(dfContract$Hours,by=list("dfContract$JobCode"), FUN=sum)
aggregate(dfContract$,by=list("dfContract$Employee"), FUN=sum)
aggregate(dfContract$Hours,by=list("dfContract$Employee"), FUN=sum)
aggregate(ContractBreakout$HoursWorked,by=list(ContractBreakout$JobCode), FUN = sum)
cast(ContractBreakout,JobCode ~ Disability,FUN=sum)
cast(ContractBreakout, JobCode ~ Disability, fun.aggregate = sum)
productSKU <- read.csv("~/Temp/productSKU.csv")
View(productSKU)
skuImport<-productSKU[,c(2,3,4)]
skuImport["Company"]<- HTC
skuImport["Company"]<- "HTC"
View(skuImport)
View(skuImport)
rm skuImport
rm(skuImport)
View(productSKU)
View(productSKU)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
View(skuImport)
View(skuImport)
colNames(skuImport)<-c("Company","SKU", "Description")
colnames(skuImport)<-c("Company","SKU", "Description")
View(skuImport)
View(skuImport)
write.csv(skuImport,"~/Temp/epicorePartImport.csv")
rm(productSKU,skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
colnames(skuImport)<-c("Company","SKU", "Description")
write.csv(skuImport,"~/Temp/epicorePartImport.csv",row.names=FALSE,na="")
rm(productSKU,skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
colnames(skuImport)<-c("Company","SKU", "Description")
duplicated(skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
duplicated(skuImport)
View(skuImport)
View(skuImport)
unique(skuImport)
productSKU <- read.csv("~/Temp/productSKU.csv")
skuImport <-productSKU[,c(2,3)]
skuImport <-unique(skuImport)
skuImport["Company"]<-"HTC"
skuImport<-skuImport[,c(3,1,2)]
colnames(skuImport)<-c("Company","SKU", "Description")
write.csv(skuImport,"~/Temp/epicorePartImport.csv",row.names=FALSE,na="")
rm(productSKU,skuImport)
epicoreWarehouseBin <- read.csv("~/Temp/Epicore_Import/epicoreWarehouseBin.csv")
View(epicoreWarehouseBin)
gsub(" ","",epicorewarehouseBin$Description , fixed=TRUE)
Bins<-dataframe(epicorewarehouseBin)
Bins<-data.frame(epicorewarehouseBin)
Bins<-data.frame(epicoreWarehouseBin)
gsub(" ","",Bins$Description , fixed=TRUE)
Bins$Description<-gsub(" ","",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("BIN","Bin",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("Bin0","Bin ",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("SHELF","Shf ",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
Bins$Description<-gsub("01","1",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("02","2",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("03","3",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("04","4",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("05","5",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("06","6",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("07","7",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("08","8",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("09","9",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("SECTION","Sec",Bins$Description , fixed=TRUE)
View(Bins)
View(Bins)
View(Bins)
write.csv(Bins,"C:/Users/jeremyp.HTC/Documents/Temp/Epicore_Import/epicoreWarehouseBin.csv",row.names=FALSE,na="0")
Bins$Description<-gsub("Section","Sec",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("Shelf","Shf",Bins$Description , fixed=TRUE)
write.csv(Bins,"C:/Users/jeremyp.HTC/Documents/Temp/Epicore_Import/epicoreWarehouseBin.csv",row.names=FALSE,na="0")
Bins$Description<-gsub("Sec","Sec ",Bins$Description , fixed=TRUE)
Bins$Description<-gsub("Shf","Shf ",Bins$Description , fixed=TRUE)
write.csv(Bins,"C:/Users/jeremyp.HTC/Documents/Temp/Epicore_Import/epicoreWarehouseBin.csv",row.names=FALSE,na="0")
View(Bins)
View(Bins)
epicoreWarehouseBin <- read.csv("~/Temp/Epicore_Import/epicoreWarehouseBin.csv")
View(epicoreWarehouseBin)
Bins <- epicoreWarehouseBin
rm(epicoreWarehouseBin)
View(Bins)
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
View(test)
View(test)
View(Bins)
Bins <- read.csv("~/Temp/Epicore_Import/epicoreWarehouseBin.csv")
View(Bins)
test <- data.frame(do.call('rbind', strsplit(as.character(Bin$Num,Bins$Description),'/',fixed=TRUE)))
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Num,Bins$Description),'/',fixed=TRUE)))
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
rm(test)
within(Bin, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE))))
within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE))))
test <- within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE))))
View(test)
View(test)
View(test)
View(test)
rm(test)
test <- data.fram(within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))))
test <- data.frame(within(Bins, Bins<-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))))
View(test)
View(test)
rm(test)
test <- <-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))
test <-data.frame(do.call('rbind', strsplit(as.character(Bins$Description), '/', fixed=TRUE)))
View(test)
rm(test)
library("reshape", lib.loc="C:/Program Files/R/R-2.15.2/library")
View(Bins)
colsplit(Bins,split="/",c("Col1","Col2","Col3"))
colsplit(Bins,"/",c("Col1","Col2","Col3"))
detach("package:reshape", unload=TRUE)
library("reshape", lib.loc="C:/Program Files/R/R-2.15.2/library")
colsplit(Bins,"/",c("Col1","Col2","Col3"))
test <- lapply(seq_along(Bins), function(i){colsplit(Bins[, i], "/", paste0(colnames(Bins)[i], c("Col1","Col2","Col3")))})
test <- lapply(seq_along(Bins), function(i){colsplit(Bins[, i], "/", paste0(colnames(Bins)[i], letters[1:2]))})
test <- lapply(seq_along(Bins), function(i){colsplit(Bins[, i], "/", paste0(colnames(Bins)[i], letters[1]))})
strsplit(Bins$Description, "/")
split(Bins$Description, "/")
test <- data.frame(do.call('rbind', strsplit(as.character(Bins$Description),'/',fixed=TRUE)))
View(test)
strg <- c("123:abc", "qwe:789f", "abcde", "a:fd", "567")
rm(test)
fix(strg)
rm(strg)
sapply(strsplit(Bins$Description, "/"), function(x){if (length(x) == 1) x <- c(x, NA)x})
test <- strsplit(Bins$Description, "/", fixed=TRUE)
test <- strsplit(Bins$Description, '/', fixed=TRUE)
colsplit(Bins$Description,"/",c(Col1,Col2,Col3))
# Getting the mulplier, which is the no. of business days in month * 7.5
library(lubridate)
mth = ifelse(month(Sys.time())==1,12,month(Sys.time()) -1)
#mth = 11
yr = ifelse(mth==12,year(Sys.time())-1,year(Sys.time()))
# yr=2013
yr<-paste(yr,"-01-01",sep="")
library(plyr)
Days<-seq(as.Date(yr), by="1 day", length.out=365)
dfDays <- data.frame(Date=Days,  Month=month(Days))
dfDays$BusinessDay<-wday(dfDays$Date)
dfDays<-subset(dfDays,dfDays$Month==mth & dfDays$BusinessDay>1 & dfDays$BusinessDay<7)
Multiplier<-nrow(dfDays)*7.5
StartDay<-as.character.Date(min(dfDays$Date))
EndDay<-as.character.Date(max(dfDays$Date))
rm(dfDays)
rm(Days)
rm(mth)
# Retrieving sql
library(stringr)
setwd("C:/Users/jeremyp.HTC/Documents/Development/Vertex/R/FTE")
SQL<-paste(readLines("fte_rVertex.sql",encoding="UTF-8"),collapse=' ')
SQL<-str_replace_all(SQL[1],'\t','')
SQL<-str_replace(SQL[1],'@StartDay',paste("\'",StartDay,"\'",sep=""))
SQL<-str_replace(SQL[1],'@EndDay',paste("\'",EndDay,"\'",sep=""))
# SQL<-str_replace(SQL[1],'@Multiplier',Multiplier)
#Returning data set to
library("RODBC", lib.loc="C:/Program Files/R/R-2.15.2/library")
odbc<-odbcConnect("Vertex",uid="sysdba",pwd="masterkey")
FTE<-data.frame(sqlQuery(odbc,SQL[1]))
FTE$HOURS<-round(FTE$HOURS,digits=2)
odbcCloseAll()
rm(odbc)
#dfHours<-data.frame(aggregate(FTE$HOURS,by=list(CostCenter=FTE$COSTCENTER,Job=FTE$JOB,Description=FTE$JOBDESCRIPTION, DisabilityCode=FTE$DISABILITYCODE),FUN=sum))
colnames(FTE)<- c("CostCenter","Job","Description", "Disability", "Hours")
# breaking up data between Disabled, Non-Disabled
FTE$Disability= ifelse(FTE$Disability!=3,"Disabled","NonDisabled")
FTE<-data.frame(aggregate(FTE$Hours,by=list(CostCenter=FTE$CostCenter,Job=FTE$Job,Description=FTE$Description,Disabled=FTE$Disability), FUN=sum))
#performing calculation to get FTE
names(FTE)[5]<-"FTE"
FTE$FTE<-round(FTE$FTE/Multiplier, digits=2)
# Merging data so I can pivot
FTE<-data.frame(within(FTE, Value <- paste(CostCenter, Job,Description, sep='|')))
# Removing Cost Center & Job, reordering columns so I can pivot dataset
FTE<-FTE[,c(6,4,5)]
library("reshape", lib.loc="C:\\Program Files\\R\\R-2.15.2\\library")
FTE <- data.frame(cast(FTE, Value ~ Disabled,value="FTE"))
FTE= data.frame(transform(FTE, new= colsplit(FTE$Value, split = "\\|", names = c('CostCenter', 'JobCode','Description'))))
FTE<-FTE[,c(4,5,6,2,3)]
colnames(FTE)<- c("CostCenter","Job","Description", "Disabled", "NonDisabled")
write.csv(FTE,"C:/Users/jeremyp.HTC/Documents/Temp/FTE.csv",row.names=FALSE,na="0")
# removing objects from memory
rm(FTE,StartDay,EndDay,Multiplier,SQL,yr)
